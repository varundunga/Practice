package evoke.practice.JsonParser;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Scanner;
import org.apache.poi.*;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import io.restassured.path.json.JsonPath;

public class jsf3 {

	public static void main(String[] args) throws ParseException, IOException {
		// TODO Auto-generated method stub

		String baseUrl="https://core.redlion.com/api/windsurfer/availability?_format=json&Quantity=1&Start=2020-01-07&End=2020-01-10&Adults=1&HotelCode=WAABDN%2cWATWTR%2cBC1663%2cWAENUM";
        System.setProperty("http.agent", "Chrome");
				URL url=new URL(baseUrl);
				Scanner sc = new Scanner(url.openStream());
				String inline="";
				while(sc.hasNext())
				{
				inline+=sc.nextLine();
				}
				sc.close();
				JSONParser p=new JSONParser();
				JSONObject jb=(JSONObject) p.parse(inline);
				//HSSFWorkbook workbook=new HSSFWorkbook();
				//HSSFSheet sheet=workbook.createSheet("Report");
				
								
				HashMap<String,HashMap<String,HashMap<String,String>>> hmhotellist=new HashMap<String,HashMap<String,HashMap<String,String>>>();
				Iterator i=jb.keySet().iterator();
				while(i.hasNext())
				{
					
					String hotellist=(String)i.next();
					System.out.println(hotellist);
					JSONObject value=(JSONObject) jb.get(hotellist);
					Iterator i1=value.keySet().iterator();
					while(i1.hasNext())
					{
						String key1=(String)i1.next();
						System.out.println(key1);
						JSONObject value1=(JSONObject) value.get(key1);
						Iterator i2=value1.keySet().iterator();
						
						while(i2.hasNext())
						{
							String key2=(String)i2.next();
							System.out.println(key2);
							//JSONObject value2=(JSONObject) value1.get(key);
						}
						
					}
					
					//hm.put(key, value);
										
				}
				
				//Common.hashMap(jb, hotellist);
				
				
				/*hotellist.forEach((k,v)->{
					
					
					String name=v.get("Name").toString();
					
					System.out.println(name);
					String rooms=v.get("Rooms").toString();
					try {
						JSONObject roomsj=Common.stringtojson(rooms);
						//System.out.println(roomsj);
						HashMap<String,JSONObject> hotelroom=new HashMap<String,JSONObject>();
						Common.hashMap(roomsj, hotelroom);
						hotelroom.forEach((k2,v2)->{

							String roomname=v2.get("Name").toString();
							System.out.println(k2);
							System.out.println(roomname);
							String occupancy=v2.get("Occupancy").toString();
							System.out.println(occupancy);
							
							String rates=v2.get("Rates").toString();
							try {
								JSONObject ratesj=Common.stringtojson(rates);
								HashMap<String,JSONObject> hotelroomrates=new HashMap<String,JSONObject>();
								Common.hashMap(ratesj, hotelroomrates);
								hotelroomrates.forEach((k3,v3)->{;
									
									String roomrate=v3.get("RoomRate").toString();
									System.out.println(k3);
									System.out.println(roomrate);
								});
								
							} catch (ParseException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
						});
						
						
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}	
				});*/
				
			
	}

}
